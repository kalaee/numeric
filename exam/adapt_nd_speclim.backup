#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <assert.h>

#define ADAPT_NRECUR_MAX 10000

double adapt_nd_speclim_next(double f(double* x), double d(double* x, int p), double u(double* x, int p), int dim, int lvl, double* coord, double acc, double eps, double* err);

// perform integration over the y coordinate for a given x value
// the routine uses adaptive quadratures with open intervals
double adapt_nd_speclim_last(double f(double* x), double a, double b, double d(double* x, int p), double u(double* x, int p), int dim, double* coord, double y2, double y3, double acc, double eps, double *err, int nrecur)
{
	// check iteration level is not too deep
	// if too big, send error message and return 0
	if (nrecur > ADAPT_NRECUR_MAX)
	{
		fprintf(stderr,"adapt_nd_speclim_last: recursion level too deep in last dimension!\n");
		exit(EXIT_FAILURE);
	}
	// make integral estimate of fourth and second order
	int i;
	double h, x1[dim], x4[dim], Q, q, y1, y4;
	h = b-a;
	for (i=0; i<dim-1; i++)
	{
		x1[i] = coord[i];
		x4[i] = coord[i];
	}
	x1[dim-1] = a + h/6;
	x4[dim-1] = a + h*5/6;
	y1 = f(x1);
	y4 = f(x4);
	Q = h/6.*(2.*y1+y2+y3+2.*y4);
	q = h/2.*(y1+y4);
	*err = fabs(Q-q);
	// if error sufficiently small: return integral value and error estimate
	if ( *err < acc + eps*fabs(Q) )
	{
		return Q;
	}
	// if error too big: split interval in two and integrate each interval
	// recycling estimated points
	else
	{
		acc /= sqrt(2);
		double Q1, Q2, err1, err2;
		Q1 = adapt_nd_speclim_last(f,a,a+h/2,d,u,dim,x1,y1,y2,acc,eps,&err1,nrecur+1);
		Q2 = adapt_nd_speclim_last(f,a+h/2,b,d,u,dim,x4,y3,y4,acc,eps,&err2,nrecur+1);
		*err  = sqrt(err1*err1 + err2*err2);
		return Q1 + Q2;
	}
}

double adapt_nd_speclim_now(double f(double* x), double a, double b, double d(double* x, int p), double u(double* x, int p), int dim, int lvl, double* coord, double y2, double y3, double acc, double eps, double*err, int nrecur)
{
	if (nrecur > ADAPT_NRECUR_MAX)
	{
		fprintf(stderr,"adapt_nd_speclim_now: recursion level too deep in dim = %d!\n",lvl);
		exit(EXIT_FAILURE);
	}
	int i;
	double h, x1[lvl+1], x4[lvl+1], Q, q, acc_next, err1, err2, y1, y4;
	h = b - a;
	for(i=0; i<lvl; i++)
	{
		x1[i] = coord[i];
		x4[i] = coord[i];
	}
	x1[lvl] = a + h/6;
	x4[lvl] = a + h*5/6;
	acc_next = acc/2;
	y1 = adapt_nd_speclim_next(f,d,u,dim,lvl+1,x1,acc_next,eps,&err1);
	y4 = adapt_nd_speclim_next(f,d,u,dim,lvl+1,x4,acc_next,eps,&err2);
	Q = h/6*(2*y1+y2+y3+2*y4);
	q = h/2*(y1+y4);
	*err = fabs(Q-q);
	if (*err < acc + eps*fabs(Q))
	{
		return Q;
	}
	else
	{
		acc /= sqrt(2);
		double err1, err2, Q1, Q2;
		Q1 = adapt_nd_speclim_now(f,a,a+h/2,d,u,dim,lvl,x1,y1,y2,acc,eps,&err1,nrecur+1);
		Q2 = adapt_nd_speclim_now(f,a+h/2,b,d,u,dim,lvl,x4,y3,y4,acc,eps,&err2,nrecur+1);
		*err = sqrt(err1*err1+err2*err2);
		return Q1 + Q2;
	}
}

double adapt_nd_speclim_next(double f(double* x), double d(double* x, int p), double u(double* x, int p), int dim, int lvl, double* coord, double acc, double eps, double* err)
{
	int i;
	double Q, h, a, b, y2, y3, x2[lvl+1], x3[lvl+1], acc_next, err1, err2;
	a = d(coord,lvl);
	b = u(coord,lvl);
	h = b - a;
	if (h == 0)
	{
		*err = 0;
		return 0;
	}
	for (i=0; i<lvl; i++)
	{
		x2[i] = coord[i];
		x3[i] = coord[i];
	}
	x2[lvl] = a + h*2/6;
	x3[lvl] = a + h*4/6;
	if (lvl == dim-1)
	{
		y2 = f(x2);
		y3 = f(x3);
		Q = adapt_nd_speclim_last(f,a,b,d,u,dim,coord,y2,y3,acc,eps,err,0);
		return Q;
	}
	else
	{
		acc_next = acc/2;
		y2 = adapt_nd_speclim_next(f,d,u,dim,lvl+1,x2,acc_next,eps,&err1);
		y3 = adapt_nd_speclim_next(f,d,u,dim,lvl+1,x3,acc_next,eps,&err2);
		Q = adapt_nd_speclim_now(f,a,b,d,u,dim,lvl,coord,y2,y3,acc,eps,err,0);
		*err = sqrt((*err)*(*err)+err1*err1+err2*err2);
		return Q;
	}
}

double adapt_nd_speclim(double f(double* x), double d(double* x, int p), double u (double* x, int p), int dim, double acc, double eps, double *err)
{
	double x;
	if(u(&x,0) == d(&x,0))
	{
		*err = 0;
		return 0;
	}
	else
	{
		double Q;
		Q = adapt_nd_speclim_next(f,d,u,dim,0,&x,acc,eps,err);
		return Q;
	}
}
